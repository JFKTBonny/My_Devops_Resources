###################   GitHub Actions: Workflows

    GitHub Actions is a powerful CI/CD tool integrated directly into GitHub. 
    It allows you to automate workflows for building, testing, and deploying your code. 
    With GitHub Actions, you can define custom workflows using YAML files, making it easy to automate tasks like running tests,
    building artifacts, and deploying applications.

Why Use GitHub Actions
    - Native Integration: GitHub Actions is built into GitHub, so there’s no need for external tools.
    - Flexibility: Create custom workflows tailored to your project’s needs.
    - Reusability: Use pre-built actions from the GitHub Marketplace or create your own.
    - Scalability: Supports small to large projects with ease.

Creating a Workflow:
    1. Add a .github/workflows/main.yml file:
    This file defines the workflow. Here’s an example:
        name: CI

        on: [push]

        jobs:
        build:
            runs-on: ubuntu-latest

            steps:
            - name: Checkout code
                uses: actions/checkout@v3

            - name: Set up Java
                uses: actions/setup-java@v3
                with:
                java-version: '17'

            - name: Build the project
                run: mvn clean install

            - name: Run tests
                run: mvn test


    2. Push the file to your GitHub repository:
    Once the .github/workflows/main.yml file is added to your repository, 
    GitHub automatically detects it and starts running the workflow.
    3. Monitor the workflow:
    You can view the progress of your workflow in the GitHub UI under the Actions tab.

Key Features of GitHub Actions:
    1- Actions: Reusable steps that can be shared across workflows. 
       For example, actions/checkout checks out your repository, and actions/setup-java sets up a Java environment.
    2- Matrix Builds: Test your code on multiple operating systems and versions simultaneously.
       For example, you can test your app on Ubuntu, Windows, and macOS with different Java versions.
    3- Artifacts: Upload build outputs (e.g., JAR files, logs) and download them later for debugging or deployment.
    4- Scheduled Workflows: Run workflows at specific times using cron syntax.
    5- Manual Triggers: Trigger workflows manually using the workflow_dispatch event.

Hands-On Exercise:
    - Create a GitHub Actions Workflow for a Java App:
    1. Set up a simple Java application in a GitHub repository.
    2. Create a .github/workflows/main.yml file to define the workflow stages 
    (e.g., set up Java, build the project, run tests).
    3. Push the file to your repository and observe GitHub automatically running the workflow.
    4. Explore the workflow logs and artifacts to understand how the process works.

Tips for Using GitHub Actions:
    - Use pre-built actions from the GitHub Marketplace to save time.
    - Leverage matrix builds to test your code on multiple platforms and versions.
    - Use artifacts to store build outputs and share them between jobs.
    - Explore scheduled workflows for tasks like nightly builds or periodic tests.

Summary:
GitHub Actions is a versatile and powerful tool for automating your CI/CD workflows. 
With its native integration, flexibility, and rich feature set, it’s an excellent choice for teams looking to streamline their development processes.
Start by creating a simple workflow and gradually explore its advanced features to unlock its full potential.
