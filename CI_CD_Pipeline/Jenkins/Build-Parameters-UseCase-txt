

Use Case Scenarios for Build Parameters in Jenkinsfile
Build parameters in Jenkins allow users to pass dynamic values at runtime, making the pipeline more flexible. Here are some common scenarios:

1. Selecting Deployment Environment
Use Case: A pipeline needs to deploy an application to different environments like DEV, QA, or PROD.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    choice(name: 'ENV', choices: ['DEV', 'QA', 'PROD'], description: 'Select Deployment Environment')
                }
                stages {
                    stage('Deploy') {
                        steps {
                            script {
                                echo "Deploying to ${params.ENV} environment"
                                if (params.ENV == 'DEV') {
                                    echo "Deploying to Development Server..."
                                } else if (params.ENV == 'QA') {
                                    echo "Deploying to QA Server..."
                                } else {
                                    echo "Deploying to Production Server..."
                                }
                            }
                        }
                    }
                }
            }


2. Running Tests with Different Parameters
Use Case: Run tests with different configurations, e.g., setting a timeout.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    string(name: 'TEST_TYPE', defaultValue: 'smoke', description: 'Type of tests to run')
                    booleanParam(name: 'RUN_EXTENDED_TESTS', defaultValue: false, description: 'Run extended tests?')
                }
                stages {
                    stage('Test Execution') {
                        steps {
                            script {
                                echo "Running ${params.TEST_TYPE} tests"
                                if (params.RUN_EXTENDED_TESTS) {
                                    echo "Running extended test suite..."
                                } else {
                                    echo "Skipping extended tests..."
                                }
                            }
                        }
                    }
                }
            }


3. Choosing a Git Branch for Build
Use Case: Allow users to select a specific branch to build.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to build')
                }
                stages {
                    stage('Checkout Code') {
                        steps {
                            script {
                                echo "Checking out branch: ${params.BRANCH_NAME}"
                                git branch: params.BRANCH_NAME, url: 'https://github.com/your-repo.git'
                            }
                        }
                    }
                }
            }


4. Defining Custom Build Versions
Use Case: Set a version for the build, useful for tagging releases.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    string(name: 'BUILD_VERSION', defaultValue: '1.0.0', description: 'Define build version')
                }
                stages {
                    stage('Build') {
                        steps {
                            echo "Building version ${params.BUILD_VERSION}"
                        }
                    }
                }
            }


5. Toggle Features in the Build
Use Case: Enable or disable certain features in the pipeline.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    booleanParam(name: 'ENABLE_LOGGING', defaultValue: true, description: 'Enable detailed logging?')
                }
                stages {
                    stage('Build') {
                        steps {
                            script {
                                if (params.ENABLE_LOGGING) {
                                    echo "Logging is enabled"
                                } else {
                                    echo "Logging is disabled"
                                }
                            }
                        }
                    }
                }
            }


6. Customizing Deployment Targets
Use Case: Specify a custom server IP for deployment.

  Jenkinsfile Example:


            pipeline {
                agent any
                parameters {
                    string(name: 'SERVER_IP', defaultValue: '192.168.1.100', description: 'Target server IP')
                }
                stages {
                    stage('Deploy') {
                        steps {
                            echo "Deploying to server: ${params.SERVER_IP}"
                        }
                    }
                }
            }


7. Scheduled or Manual Triggering with Custom Config
Use Case: Allow users to override default behavior when running the pipeline manually.

  Jenkinsfile Example:


pipeline {
    agent any
    parameters {
        choice(name: 'RUN_MODE', choices: ['AUTO', 'MANUAL'], description: 'Choose execution mode')
    }
    stages {
        stage('Execution') {
            steps {
                script {
                    if (params.RUN_MODE == 'AUTO') {
                        echo "Running in automatic mode..."
                    } else {
                        echo "Manual execution mode selected."
                    }
                }
            }
        }
    }
}








Single Jenkinsfile for an Entire Project

            pipeline {
                agent any

                parameters {
                    choice(name: 'ACTION', choices: ['BUILD', 'TEST', 'DEPLOY'], description: 'Choose pipeline action')
                    choice(name: 'ENVIRONMENT', choices: ['DEV', 'QA', 'PROD'], description: 'Deployment Environment')
                    string(name: 'BRANCH', defaultValue: 'main', description: 'Git Branch to build')
                    booleanParam(name: 'RUN_SECURITY_TESTS', defaultValue: false, description: 'Run security tests?')
                    string(name: 'DEPLOY_SERVER', defaultValue: '192.168.1.100', description: 'Server for deployment')
                }

                stages {
                    stage('Checkout Code') {
                        steps {
                            script {
                                echo "Checking out branch: ${params.BRANCH}"
                                git branch: params.BRANCH, url: 'https://github.com/your-repo.git'
                            }
                        }
                    }

                    stage('Build') {
                        when { expression { params.ACTION == 'BUILD' } }
                        steps {
                            echo "Building project from branch ${params.BRANCH}..."
                            // Add build commands here
                        }
                    }

                    stage('Test') {
                        when { expression { params.ACTION == 'TEST' } }
                        steps {
                            echo "Running tests for branch ${params.BRANCH}..."
                            if (params.RUN_SECURITY_TESTS) {
                                echo "Running security tests..."
                            } else {
                                echo "Skipping security tests..."
                            }
                            // Add test commands here
                        }
                    }

                    stage('Deploy') {
                        when { expression { params.ACTION == 'DEPLOY' } }
                        steps {
                            echo "Deploying to ${params.ENVIRONMENT} environment on server ${params.DEPLOY_SERVER}"
                            // Add deployment commands here
                        }
                    }
                }

                post {
                    always {
                        echo "Pipeline execution completed."
                    }
                }
            }


How This Works:

    Single Jenkinsfile for All Tasks
    Instead of separate Jenkinsfiles for build, test, and deploy, this single script can handle all actions.
    Dynamic Parameters
    The user can choose what to do (build, test, or deploy).
    They can select the environment and specify branch, server, or extra options.
    Conditional Execution
    The pipeline only runs relevant stages based on the selected action.
    Scalability
    If new tasks are required, you can just add another stage and control it with a parameter.

How to Use This in Jenkins:

    Go to Jenkins Dashboard → Click on New Item → Choose Pipeline.
    Paste the Jenkinsfile script into the Pipeline script section.
    Click "Build with Parameters".
    Select the required options:

            ACTION → BUILD, TEST, or DEPLOY
            ENVIRONMENT → DEV, QA, PROD
            BRANCH → The Git branch to use
            RUN_SECURITY_TESTS → Enable/disable security testing
            DEPLOY_SERVER → Specify the deployment target
