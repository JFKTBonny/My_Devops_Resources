pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Select the deployment environment')
        booleanParam(name: 'RUN_CI', defaultValue: true, description: 'Run CI process (Build, Test, Deploy to GitHub)')
    }

    environment {
        REPO_URL = 'git@github.com:your-org/your-repo.git'  // Replace with your GitHub repo URL
        DOCKER_IMAGE_FRONTEND = 'my-app-frontend'
        DOCKER_IMAGE_BACKEND = 'my-app-backend'
        DOCKER_REGISTRY = 'docker.io/your-dockerhub' // Replace with your DockerHub or other registry
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test in Parallel') {
            when { expression { params.RUN_CI } }
            parallel {
                stage('Build & Test Frontend') {
                    steps {
                        script {
                            echo "Building and testing frontend..."
                            sh """
                                cd frontend
                                npm install
                                npm run build
                                npm test
                            """
                        }
                    }
                }
                stage('Build & Test Backend') {
                    steps {
                        script {
                            echo "Building and testing backend..."
                            sh """
                                cd backend
                                ./gradlew build
                                ./gradlew test
                            """
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            when { expression { params.ENV == 'dev' } } // Only build images in dev
            parallel {
                stage('Build & Push Frontend Image') {
                    steps {
                        script {
                            def frontendTag = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_FRONTEND}:${params.ENV}-${env.BUILD_NUMBER}"
                            echo "Building Frontend Docker image: ${frontendTag}"
                            sh """
                                cd frontend
                                docker build -t ${frontendTag} .
                                docker push ${frontendTag}
                            """
                        }
                    }
                }
                stage('Build & Push Backend Image') {
                    steps {
                        script {
                            def backendTag = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_BACKEND}:${params.ENV}-${env.BUILD_NUMBER}"
                            echo "Building Backend Docker image: ${backendTag}"
                            sh """
                                cd backend
                                docker build -t ${backendTag} .
                                docker push ${backendTag}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to GitHub') {
            when { expression { params.RUN_CI } }
            steps {
                script {
                    echo "Deploying code to GitHub..."
                    sh """
                        git config --global user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins"
                        git add .
                        git commit -m "CI/CD deployment - Build ${env.BUILD_NUMBER}"
                        git push origin HEAD:main
                    """
                }
            }
        }

        stage('Deploy to Environment') {
            steps {
                script {
                    if (params.ENV == 'dev') {
                        echo "Deploying to Development..."
                        // Dev deployment steps (e.g., Docker Compose, Kubernetes)
                    } else if (params.ENV == 'staging') {
                        echo "Deploying to Staging..."
                        // Staging deployment steps
                    } else if (params.ENV == 'prod') {
                        echo "Deploying to Production..."
                        // Production deployment steps
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
    }
}


// How This Works:
// Build and Test in Parallel:

// Frontend (React, Angular, Vue) runs: " npm install, npm run build, and npm test."
// Backend (Spring Boot, Node.js, Django, etc.) runs: " gradlew build and gradlew test."
// Both run simultaneously to save time.
// Docker Build & Push in Parallel:

// Frontend and Backend Docker images are built and pushed only in dev.
// Uses docker build -t <image> . and docker push <image>.
// Deploy to GitHub:

// If RUN_CI is true, commits the latest changes and pushes them to GitHub.
// Deploy to Environment:

// Based on ENV selection, deploys to Dev, Staging, or Prod.